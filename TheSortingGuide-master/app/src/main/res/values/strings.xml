<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">The Sorting Guide</string>
    <string name="title_sort">Sort</string>
    <string name="title_section1">Bubble</string>
    <string name="title_section2">Selection</string>
    <string name="title_section3">Insertion</string>
    <string name="title_section4">Quick Sort</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="action_example">Example action</string>
    <string name="action_settings">Settings</string>
    <string name="action_desc">Go to description...</string>
    <string name="title_activity_main_screen">MainScreen</string>
    <string name="developers">  Developers:\n
                                Amber\n
                                Anna\n
                                Jessica\n
                                Michael\n
                                Riley\n
                                Ryan\n
                                Xuying</string>
    <string name="hello_world">Hello world!</string>
    <string name="bad_input">Invalid entry. Please read the given prompt, and try again, you idiot.</string>

    <string-array name="sort_choice">
        <item>Bubble</item>
        <item>Selection</item>
        <item>Insertion</item>
        <item>QuickSort</item>

    </string-array>

    <string name="bubbleDesc">Think of this sorting method as a line of bubbles.
        Each number is its own bubble, and the density of the bubble is the number.
        This method goes through the list, comparing two adjacent numbers, or the difference between their densities.
        If the selected number is larger than the next number, the numbers switch positions in the line.
        The selected number will continue to move down the line until the next number is of equal or larger value, or it has reached the end of the list.
        Once the method has reached the end of the list, it restarts at the beginning.
        This continuation ensures the smaller numbers are at one end, and the larger numbers at the other.
    </string>
    <string name="selectionDesc">This sorting method looks through the entire list, looking for the smallest number.
        When the method reaches the end of the list, the method switches the locations of the smallest number and the number at the beginning of the list.
        The process continues for the rest of the list, shortening its search span, since the computer knows the beginning of the list has been sorted.
    </string>
    <string name="insertionDesc">In this sorting method, the selected number is \'inserted\' into the proper location in the sorted section of the list (if any).
        The selected number looks through the numbers before it,
        until it finds a location where the selected number is larger than the number before and smaller the number after.
        The process then moves the numbers to the right of the position over one, so the selected number can \'insert\' itself into the sorted section.
    </string>


    <string name="quicksortDesc">This sorting method divides the array by selecting the last number as a pivot point and sorting the numbers so that numbers
        on the left of the pivot point are smaller and numbers on the right are larger. This is repeated recursively until the array has been sorted.
    </string>


    <string name="bubbleCode">"func bubblesort( var a as array )
     for i from 1 to N
        for j from 0 to N - 1
           if a[ j ] > a[ j + 1 ]
              swap( a[ j ], a[ j + 1 ] )
end func"</string>
    <string name="selectionCode">"func selectionsort( list )
    max = length( lst ) - 1

    for i from 0 to max
        key = lst[ i ]
        keyj = i

        for j from i+1 to max
            if lst[ j ] &lt; key
            key = lst[ j ]
                keyj = j

        lst[ keyj ] = lst[ i ]
        lst[ i ] = key

    return lst

end func"</string>
    <string name="insertionCode">"func insertionsort( list )
    for i from 1 to N
        key = a[ i ]
        j = i - 1
        while j >= 0 and a[ j ] > key
            a[ j + 1 ] = a[ j ]
            &#8202;j = j - 1
        a[ j + 1 ] = key
end func"</string>


    <string name="quicksortCode">"func quicksort(A as array, low as int, high as int)
        if low &lt; high
            pivot from Partition( A, low, high )
            quicksort( A, low, pivot )
            quicksort( A, pivot + 1, high )


    Partition( A as array, low as int, high as int )
         pivot = A[ low ]
         leftwall = low

         for i from low + 1 to high
             if A[ i ] &lt; pivot then
                 swap( A[ i ], A[ leftwall ] )
                 leftwall = leftwall + 1


         swap( pivot, A[ leftwall ] )

        return ( leftwall )
end func"</string>


    <string name="sort_unit">Sorting Unit</string>

<!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>

</resources>
